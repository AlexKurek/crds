I. Basic rmap support and lookup

This includes the HST demo but also a minimal version for JWST with real instrument support.

This includes a 3 step process which is potentially:

1. determining the set of best reference file names
2. assigning actual file paths to the names
3. fetching the references from a remote site to a local cache

* Basic selector machinery
* HST demo
* Implementing web server               3 weeks for HST
	- Basic interactive lookup page
	- Web services
	    - best ref names
	   		context, filekind, header -->  (filename, URL)
	    - best ref file downloads
	        static server
	    - ref file upload?
* Python client module which interacts with web services or local rmaps, file cache.   2 weeks
* Testing versus HST best ref,  say 3-4 weeks.
* Converting HST demo to basic JWST infrastructure  1 month
* Defining JWST filekinds and fitskeys,   1 month.
* Obtain or simulate initial JWST reference files,  1-2 weeks.

This should include time to determine and generate basic JWST tables for an instrument.

II.  Reference file and rmap submission

* Uploads of reference files
* Direct submission of rmaps and basic validation
- No automatic numbering
* Automatic context updates
* Instrument, filekind, and fitskey management?   Template generation?

III.  File validation   (2 weeks)

For rmaps this basically means they're syntactically valid and everything is present.
Deeper symantic checks could also be performed to verify that the rmap
has the correct basic structure.   Checking reference files probably includes some
basic infrastructure,  similar to TPN field checking,  but might also include
semantic checks which are specific to each instrument and file kind.   Validation for
this effort should include architecture but detailed examples for only one or two
file kinds.

