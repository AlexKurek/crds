"""This module is used to generate the SYSTEM CRDSCFG reference file.  The
code is directly edited and the module itself is run to emit a new reference
as in:

$ python -m crds.jwst.gen_system_crdscfg  >new_reference.yaml

"""

import re

import yaml

from jwst import version
from jwst.stpipe import cmdline

'''
DARK, (LED, LAMP, FLAT)  all level2a only
DARK has special calwebb_dark

All others go through both level2a and level2b
'''

cal_ver = re.match("^(\d+\.\d+.\d+).*", version.__version__).group(1)

HEADER_YAML = """
author: CRDS
descrip: "Reference used to determine pipeline configuration from dataset parameters."
history: "First version generated from calcode .cfg files and EXP_TYPE/LEVEL mapping."
instrument: SYSTEM
pedigree: GROUND
reftype: CRDSCFG
telescope: JWST
useafter: 1900-01-01T00:00:00
calibration_software_version: {}
""".format(cal_ver)

# Input manually
PIPELINE_CFGS_YAML = """

# ----------------------------------------------------------------------------------------------
# MANUAL UPDATE REQUIRED
#
# Exhastive list of pipeline .cfg's to process for steps and reftypes during generation.
#
# ----------------------------------------------------------------------------------------------

pipeline_cfgs: [calwebb_dark.cfg, calwebb_sloper.cfg, calwebb_spec2.cfg, calwebb_image2.cfg]

"""

LEVEL_PIPELINE_EXPTYPE_YAML = """

# ----------------------------------------------------------------------------------------------
# MANUAL UPDATE REQUIRED
#
# Order is important since the first pattern matching an exp_type in any given level wins.
#
# For each level, CRDS searches for a matching EXP_TYPE using glob matching,  searching
# in order from top to bottom, using the first match only.   Each level will contribute one 
# .cfg for a given EXP_TYPE.
#
# skip_2b.cfg is a placeholder with no steps.
# ----------------------------------------------------------------------------------------------

level_pipeline_exptypes:
    level2a:
        - calwebb_dark.cfg: [FGS_DARK, MIR_DARK, NRC_DARK, NIS_DARK, NRS_DARK]

        - calwebb_sloper.cfg: ["*"]

    level2b:
        - calwebb_spec2.cfg: [MIR_LRS-FIXEDSLIT, MIR_LRS-SLITLESS, MIR_MRS, NRS_FIXEDSLIT, 
                             NRS_MSASPEC, NRS_IFU, NRS_BRIGHTOBJ, NRS_AUTOWAVE, NIS_SOSS]

        - calwebb_image2.cfg: [NRC_IMAGE, NRC_TACQ, NRC_CORON, NRC_FOCUS, 
                             MIR_IMAGE, MIR_TACQ, MIR_LYOT, MIR_4QPM, MIR_CORONCAL,
                             NIS_IMAGE, NIS_AMI, NIS_TACQ,
                             NRS_IMAGE, NRS_FOCUS, NRS_MIMF, NRS_BOTA, NRS_TACQ, NRS_TASLIT, NRS_TACONFIRM, NRS_CONFIRM,
                             FGS_IMAGE, FGS_FOCUS]

        - skip_2b.cfg: ["*DARK*", "*FLAT*", "*LED*", "*LAMP*", NIS_FOCUS, NIS_WFSS, NRS_AUTOWAVE]


"""

STEPS_TO_REFTYPE_EXCEPTIONS_YAML = """
# ----------------------------------------------------------------------------------------------
#
# MANUAL UPDATE REQUIRED
#
# This section defines types for exceptional steps that do not use all of their defined types 
# depending on EXP_TYPE.
#
# CRDS searches the cases top-to-bottom looking for an EXP_TYPE that glob-matches and 
# returns the first match.  The return value is used instead of the value from steps_to_reftypes.
#
# ----------------------------------------------------------------------------------------------

steps_to_reftypes_exceptions:
    flat_field:
        - case1:
            exp_types: [NRS_FIXEDSLIT, NRS_IFU, NRS_MSASPEC, NRS_BRIGHTOBJ]
            reftypes: [dflat, fflat, sflat]
        - case2:
            exp_types: ["NRS_*"]
            reftypes: []
        - case3:
            exp_types: ["*"]
            reftypes: [flat]


"""

GENERATED_BANNER = """
# ----------------------------------------------------------------------------------------------
#
# AUTOMATICALLY GENERATED (or... was anyway)
#
# This section defines mappings generated by reflecting on the JWST cal code distribution
#
# ----------------------------------------------------------------------------------------------

"""

# --------------------------------------------------------------------------------------

def generate_crdscfg_yaml():
    """Generate the SYSTEM CRDSCFG reference YAML."""
    pipeline_cfgs = yaml.load(PIPELINE_CFGS_YAML)["pipeline_cfgs"]
    pipeline_cfgs_to_steps, all_steps_to_reftypes = generate_pipeline_info(pipeline_cfgs)
    crdscfg = HEADER_YAML + PIPELINE_CFGS_YAML + LEVEL_PIPELINE_EXPTYPE_YAML
    crdscfg += STEPS_TO_REFTYPE_EXCEPTIONS_YAML
    crdscfg += GENERATED_BANNER
    crdscfg += yaml.dump({"pipeline_cfgs_to_steps" : pipeline_cfgs_to_steps}) + "\n"
    crdscfg += yaml.dump({"steps_to_reftypes" : all_steps_to_reftypes})
    return crdscfg
    
def generate_pipeline_info(pipeline_cfgs):
    pipeline_cfgs_to_steps = {}
    all_steps_to_reftypes = {}
    pipeline_cfgs_to_steps["skip_2b.cfg"] = []
    for pipeline_cfg in pipeline_cfgs:
        steps_to_reftypes = cmdline.steps_to_reftypes_from_config(pipeline_cfg)
        pipeline_cfgs_to_steps[pipeline_cfg] = sorted(list(steps_to_reftypes.keys()))
        all_steps_to_reftypes.update(steps_to_reftypes)
    return pipeline_cfgs_to_steps, all_steps_to_reftypes

# --------------------------------------------------------------------------------------

if __name__ == "__main__":
    print(generate_crdscfg_yaml())
